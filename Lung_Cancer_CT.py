# -*- coding: utf-8 -*-
"""Copy of lung CT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zOtVeig8GvKQq3TncqqDHXL6aKqSYFZu

this code is about the classification of the chest CT images into one of the four cancerous conditions namely adenocarcinoma, large cell carcinoma, squamous cell carcinoma and normal.
"""

import numpy as np
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from keras import Sequential
from tensorflow.keras.layers import *
from tensorflow.keras.models import * 
from tensorflow.keras.preprocessing import image

"""the dataset consists of about 1000 different lung CT images."""

!unzip '/content/drive/MyDrive/breast CT.zip'

"""I have used imagedatagenerator to generate samples from the given image datasets by applying the specified transforms."""

train_datagen = image.ImageDataGenerator(
    rotation_range=15,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest',
    width_shift_range=0.1,
    height_shift_range=0.1
)
test_datagen= image.ImageDataGenerator(    rotation_range=15,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest',
    width_shift_range=0.1,
    height_shift_range=0.1)

train_generator = train_datagen.flow_from_directory(
    '/Data/train',
    target_size = (224,224),
    batch_size = 8,
    class_mode = 'categorical')
validation_generator = test_datagen.flow_from_directory(
    '/Data/test',
    target_size = (224,224),
    batch_size = 8,
    shuffle=True,
    class_mode = 'categorical')

from google.colab import drive
drive.mount('/content/drive')

"""I have developed a transfer learning based EfficientNetB3 model that has been trained on imagenet dataset. I have added some additional layers to the basic model."""

base_model = tf.keras.applications.EfficientNetB3(weights='imagenet', input_shape=(224,224,3), include_top=False)

for layer in base_model.layers:
    layer.trainable=True
model = Sequential()
model.add(base_model)
model.add(GaussianNoise(0.25))
model.add(GlobalAveragePooling2D())
model.add(Dense(1024,activation='relu'))
model.add(BatchNormalization())
model.add(GaussianNoise(0.25))
model.add(Dropout(0.65))
model.add(Dense(4, activation='sigmoid'))
model.summary()

"""The model has been compiled using cross entropy loss function, adam optimiser and the following metrics:

accuracy

AUC

precision

recall
"""

model.compile(loss='categorical_crossentropy',
              optimizer=tf.keras.optimizers.Adam(learning_rate=0.00001),
              metrics=['accuracy','AUC','Precision','Recall'])

from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping
es=EarlyStopping(monitor='val_loss',patience=3)
history = model.fit(
    train_generator,
    epochs=30,
    validation_data=validation_generator,
    steps_per_epoch= 75
    )

"""the model has produced the following results:

training accuracy= 92.17%

training loss= 0.2283

training precision= 58%

training recall= 98.21%

training AUC= 0.9784
"""

model.evaluate(train_generator)

"""the model has produced the following results:

validation accuracy= 73.65%

validation loss= 0.6912

validation precision= 46.58%

validation recall= 93.02%

validation AUC= 0.9019
"""

model.evaluate(validation_generator)

from tensorflow.keras.preprocessing.image import load_img
import tensorflow.keras.preprocessing.image as Immm

img = Immm.load_img("/content/Data/valid/adenocarcinoma_left.lower.lobe_T2_N0_M0_Ib/000108 (7).png",target_size=(224,224))
imag = Immm.img_to_array(img)
imaga = np.expand_dims(imag,axis=0) 
ypred = model.predict(imaga)
print(ypred)
a=np.argmax(ypred,-1)
if a==0:
  op="Adenocarcinoma"
elif a==1:
  op="large cell carcinoma"
elif a==2:
  op="normal (void of cancer)"
else:
  op="squamous cell carcinoma"    
plt.imshow(img)
print("THE UPLOADED IMAGE IS SUSPECTED AS: "+str(op))

from keras.preprocessing import image
image.load

tf.keras.models.save_model(model,'mymodel.hdf5')

!pip install streamlit

"""I have developed a website using streamlit that accepts the lung CT image from the user in the format of PNG, JPG or JPEG. Once uploaded, the model will classify the input image into one of the four cancerous conditions (adenocarcinoma, large cell carcinoma, squamous cell carcinoma."""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import tensorflow as tf
# import streamlit as st
# from tensorflow.keras.preprocessing import image
# from PIL import Image, ImageOps
# import pandas as pd
# import cv2
# import numpy as np
# 
# 
# html_temp = """ 
#   <div style="background-color:pink ;padding:10px">
#   <h2 style="color:white;text-align:center;"> LUNG CT IMAGE CLASSIFICATION ⚕️⚕️⚕️</h2>
#   </div>
#   """ 
# st.markdown(html_temp, unsafe_allow_html=True) 
# html_temp = """ 
#   <div style="background-color:teal ;padding:10px">
#   <h2 style="color:white;text-align:center;"> Done by Sairam Adithya</h2>
#   </div>
#   """ 
# st.markdown(html_temp, unsafe_allow_html=True) 
# st.header('Types of cancer covered in the dataset are:')
# st.subheader('1. Adenocarcinoma')
# st.write('Cancer is a medical condition which is due to abnormal, uncontrollable, uncoordinated division of cells.')
# st.write('Adenocarcinoma of the lung: Lung adenocarcinoma is the most common form of lung cancer accounting for 30 percent of all cases overall and about 40 percent of all non-small cell lung cancer occurrences. Adenocarcinomas are found in several common cancers, including breast, prostate and colorectal. Adenocarcinomas of the lung are found in the outer region of the lung in glands that secrete mucus and help us breathe. Symptoms include coughing, hoarseness, weight loss and weakness.')
# st.subheader('2. Large cell carcinoma')
# st.write('Large-cell undifferentiated carcinoma: Large-cell undifferentiated carcinoma lung cancer grows and spreads quickly and can be found anywhere in the lung. This type of lung cancer usually accounts for 10 to 15 percent of all cases of NSCLC. Large-cell undifferentiated carcinoma tends to grow and spread quickly.')
# st.subheader('3. Squamous cell carcinoma')
# st.write('Squamous cell: This type of lung cancer is found centrally in the lung, where the larger bronchi join the trachea to the lung, or in one of the main airway branches. Squamous cell lung cancer is responsible for about 30 percent of all non-small cell lung cancers, and is generally linked to smoking.')
# st.subheader('4. Normal')
# st.write('This is normal lung CT image.')
# @st.cache(allow_output_mutation=True)
# def load_model():
#    model=tf.keras.models.load_model('/content/mymodel.hdf5')
#    return model
# with st.spinner('Model is being loaded..'):
#     model=load_model()
# file = st.file_uploader("Please upload any image from the local machine in case of computer or upload camera image in case of mobile.", type=["jpg", "png","jpeg"])
# st.set_option('deprecation.showfileUploaderEncoding', False)
# def import_and_predict(image_data, model):   
#         size = (224,224)    
#         image = ImageOps.fit(image_data, size, Image.ANTIALIAS)
#         image = np.asarray(image)
#         img = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
#         #img_resize = (cv2.resize(img, dsize=(75, 75),    interpolation=cv2.INTER_CUBIC))/255.
#         
#         img_reshape = img[np.newaxis,...]
#     
#         prediction = model.predict(img_reshape)
#         return prediction
# if file is None:
#      st.text("Please upload an image file within the allotted file size")
# else:
#      img = Image.open(file)
#      st.image(img, use_column_width=False)
#      size = (224,224)    
#      image = ImageOps.fit(img, size, Image.ANTIALIAS)
#      imag = np.asarray(image)
#      imaga = np.expand_dims(imag,axis=0) 
#      predictions = model.predict(imaga)
#      #predictions = import_and_predict(image, model)
#      a=np.argmax(predictions,-1)
#      if a==0:
#        st.error('The subject under observation is suspected to have adenocarcinoma. Please ensure that you consult with a professional before pursuing any kinds of treatment.')
#        st.warning('the model is only 75% accurate. this is the beta version of the model. Futher enhancements has to made to get the best results.')
#      elif a==1:
#        st.error('The subject under observation is suspected to have large cell carcinoma. Please ensure that you consult with a professional or confirm with the other modalities present in the tool.') 
#        st.warning('the model is only 75% accurate. this is the beta version of the model. Futher enhancements has to made to get the best results.')
#      elif a==2:
#        st.success('The subject under consideration is void of any lung/breast cancer.')
#        st.warning('the model is only 75% accurate. this is the beta version of the model. Futher enhancements has to made to get the best results.')      
#      else:
#        st.error('The subject under observation is suspected to have squamous cell carcinoma. Please ensure that you consult with a professional or confirm with the other modalities present in the tool.')
#        st.warning('the model is only 75% accurate. this is the beta version of the model. Futher enhancements has to made to get the best results.')

!streamlit run app.py & npx localtunnel --port 8501